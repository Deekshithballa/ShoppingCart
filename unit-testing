-----------order.service.specs.ts-------------
import { TestBed } from '@angular/core/testing';

import { OrderService } from './order.service';

describe('OrderService', () => {
  let service: OrderService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(OrderService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

----------------user.service.ts--------------
import { Injectable } from '@angular/core';

import { User } from '../models/user';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  // Store the active user state
  private activeUser: User;

  constructor() {}

  getActiveUser() {
    // We'll return the active user or undefined if no active user
    // The cast to Readonly<User> here is used to maintain immutability
    // in our stored state
    return this.activeUser as Readonly<User>;
  }

  setActiveUser(user: User) {
    this.activeUser = user;
  }
}
-----------------order.service.ts-------------
import { Injectable } from '@angular/core';

import { Order } from './../models/order';
import { Product } from '../models/product';
import { UserService } from './user.service';

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  constructor(private readonly userService: UserService) {}

  createOrder(product: Product): Order {
    return {
      id: Date.now().toString(),
      user: this.userService.getActiveUser(),
      product
    };
  }
}
---------user.service.spec.ts--------------
it('should set the active user correctly', () => {
  // Arrange
  const user: User = {
    id: 'test',
    name: 'test'
  };

  // Act
  service.setActiveUser(user);

  // Assert
  expect(service['activeUser'].id).toEqual('test');
  expect(service['activeUser'].name).toEqual('test');
});

-----------
it('should create an order correctly', () => {
  // Arrange
  const product: Product = {
    id: 'product',
    name: 'product',
    cost: 100
  };

  userServiceSpy.getActiveUser.and.returnValue({ id: 'test', name: 'test' });

  // Act
  const order = service.createOrder(product);

  // Assert
  expect(order.product.id).toEqual('product');
  expect(order.user.id).toEqual('test');
  expect(userServiceSpy.getActiveUser).toHaveBeenCalled();
});
